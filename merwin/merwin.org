#+begin_export latex
\section{Introduction}
The program \ty{merwin} merges overlapping windows returned by a
program like \ty{macle}. As shown in Figure~\ref{fig:mac}, the input
of \ty{merwin} consists of three columns, sequence accession, midpoint
of sliding window, and the value of some quantity $X$. The midpoints
are in ascending order, and the data in Figure~\ref{fig:mac} comes
from a sliding window analysis with 10 kb windows, hence the first
midpoint is 5000. In each round of the analysis the window advances by
the default step length, which is one tenth of the window length, 1 kb
in our example.
\begin{figure}
  \begin{center}
\psverbboxtrue
\psframebox{
\begin{minipage}{6cm}
\verb+NC_000001.11    5000    -1.0000+\\
\verb+NC_000001.11    6000    -1.0000+ \\
\verb+...+ \\
\verb+NC_000001.11    15000   0.0850+ \\
\verb+NC_000001.11    16000   0.0671+\\
\verb+NC_000001.11    17000   0.0720+\\
\verb+NC_000001.11    18000   0.0736+\\
\verb+...+\\
\end{minipage}
}
  \end{center}
\caption{Example input of \ty{merwin}.}\label{fig:mac}
\end{figure}
The program \ty{merwin} compares the value of $X$ in the $i$-th
window, $x_i$, to a threshold, $t$. The program runs in two modes,
maximizing and minimizing. In the default maximizing mode, overlapping
windows with $x_i\ge t$ are merged. In minimizing mode, overlapping
windows with $x_i\le t$ are merged.

The output of \ty{merwin} consists of four columns, the accession, the
start and end positions of the interval, and the average $X$ of the
windows merged to form that interval.

\section{Implementation}
The program \ty{merwin} has hooks for imports, functions, and the logic
of the main function.
#+end_export
#+begin_src go <<merwin.go>>=
  package main

  import (
	  //<<Imports, Ch. \ref{ch:me}>>
  )

  //<<Functions, Ch. \ref{ch:me}>>
  func main() {
	  //<<Main function , Ch. \ref{ch:me}>>
  }
#+end_src
#+begin_export latex
In the main function, we prepare the error messages logged, set the
usage, declare the options, parse the options, respond to the options,
and parse the input files.
#+end_export
#+begin_src go <<Main function , Ch. \ref{ch:me}>>=
  clio.PrepLog("merwin")
  //<<Set usage, Ch. \ref{ch:me}>>
  //<<Declare options, Ch. \ref{ch:me}>>
  //<<Parse options, Ch. \ref{ch:me}>>
  //<<Respond to options, Ch. \ref{ch:me}>>
  //<<Parse input files, Ch. \ref{ch:me}>>
#+end_src
#+begin_export latex
We import \ty{clio}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_export latex
The usage consists of three parts, the actual usage message, an
explanation of the purpose of \ty{merwin}, and an example command. We
make the $\cm$ threshold a mandatory option as it is too easy to
accept a default, when this will almost certainly be wrong.
#+end_export
#+begin_src go <<Set usage, Ch. \ref{ch:me}>>=
  u := "merwin -t <threshold> [option]... [file]..."
  p := "Merge overlapping windows."
  e := "merwin -t 0.9954 hs.dat"
  clio.Usage(u, p, e)
#+end_src
#+begin_export latex
Apart from the version, we declare four additional options, the window
length, the threshold of $X$, minimizing instead of maximizing, and
the value  for missing data.
#+end_export
#+begin_src go <<Declare options, Ch. \ref{ch:me}>>=
  optV := flag.Bool("v", false, "version")
  optW := flag.Int("w", 10000, "window length")
  optT := flag.Float64("t", 0.0, "threshold")
  m := "minimizing, i. e. merge if x_i <= t " +
	  "(default maximizing, i. e. merge if x_i >= t)"
  optI := flag.Bool("i", false, m)
  optM := flag.Float64("m", -1, "missing data")
#+end_src
#+begin_export latex
We import \ty{flag}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "flag"
#+end_src
#+begin_export latex
We parse the options.
#+end_export
#+begin_src go <<Parse options, Ch. \ref{ch:me}>>=
  flag.Parse()
#+end_src
#+begin_export latex
The first option we respond to is the version request, as this stops
the program if true.
#+end_export
#+begin_src go <<Respond to options, Ch. \ref{ch:me}>>=
  if *optV {
	  util.PrintInfo("merwin")
  }
#+end_src
#+begin_export latex
We import \ty{util}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "github.com/evolbioinf/auger/util"
#+end_src
#+begin_export latex
We also check the user has supplied a threshold for $X$. If not, we
ask for one.
#+end_export
#+begin_src go <<Respond to options, Ch. \ref{ch:me}>>=
  if *optT == 0.0 {
	  m := "please supply a threshold"
	  log.Fatal(m)
  }
#+end_src
#+begin_export latex
We import \ty{log}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "log"
#+end_src
#+begin_export latex
The remaining tokens on the command line are interpreted as the names
of files. These are parsed using the function \ty{ParseFiles}, which
applies the function \ty{parse} to each one of them. The function
\ty{parse} in turn takes as arguments the window length, the
threshold, whether or not we are in minimizing mode, and the value of
$X$ that indicates missing data.
#+end_export
#+begin_src go <<Parse input files, Ch. \ref{ch:me}>>=
  files := flag.Args()
  clio.ParseFiles(files, parse, *optW, *optT, *optI, *optM)
#+end_src
#+begin_export latex
Inside \ty{parse}, we retrieve the four arguments just passed, prepare
the variables needed for the scan, construct a scanner, and analyze
each window scanned. After the iteration over the windows, there might
still be one last interval to output.
#+end_export
#+begin_src go <<Functions, Ch. \ref{ch:me}>>=
  func parse(r io.Reader, args ...interface{}) {
	  //<<Retrieve arguments, Ch. \ref{ch:me}>>
	  //<<Prepare variables, Ch. \ref{ch:me}>>
	  sc := bufio.NewScanner(r)
	  for sc.Scan() {
		  //<<Analyze window, Ch. \ref{ch:me}>>
	  }
	  //<<Output last interval? Ch. \ref{ch:me}>>
  }
#+end_src
#+begin_export latex
We import \ty{io} and \ty{bufio}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "io"
  "bufio"
#+end_src
#+begin_export latex
We use type assertion to retrieve the window length, the threshold,
whether or not the program is in minimizing mode, and the value for
missing data.
#+end_export
#+begin_src go <<Retrieve arguments, Ch. \ref{ch:me}>>=
  w := args[0].(int)
  threshold := args[1].(float64)
  minimize := args[2].(bool)
  missing := args[3].(float64)
#+end_src
#+begin_export latex
While iterating across the ordered windows, we keep track of five
quantities,
\begin{enumerate}
\item the sum of $X$, \ty{sum}
\item the number of windows summed, \ty{n}
\item the start position of the current interval, \ty{is}; this is
  initialized to -1 to indicate that currently there is no open
  interval.
\item the end position of the current interval, \ty{ie}
\item the name of the previous sequence, \ty{prevSeq}
\end{enumerate}
#+end_export
#+begin_src go <<Prepare variables, Ch. \ref{ch:me}>>=
  sum := 0.0
  n := 0
  is := -1
  ie := is
  prevSeq := ""
#+end_src
#+begin_export latex
To analyze the current window, we split it into the three fields shown
in Figure~\ref{fig:mac}---name, midpoint, and $X$---and retrieve the
name of the current sequence. Then we retrieve the other two values
that make up the interval, the midpoint and $X$. Based on the current
window, we have three decisions to take: whether or not to output the
current interval, if it exists, whether or not the current window is a
merge candidate, and whether or not to actually merge the
window. After that, we prepare the analysis of the next window by
setting the previous sequence accession to the current accession.
#+end_export
#+begin_src go <<Analyze window, Ch. \ref{ch:me}>>=
  fields := strings.Fields(sc.Text())
  curSeq := fields[0]
  //<<Retrieve midpoint and $X$, Ch. \ref{ch:me}>>
  //<<Output interval? Ch. \ref{ch:me}>>
  //<<Is window a merge candidate? Ch. \ref{ch:me}>>
  //<<Merge window? Ch. \ref{ch:me}>>
  prevSeq = curSeq
#+end_src
#+begin_export latex
We import \ty{strings}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "strings"
#+end_src
#+begin_export latex
We retrieve the midpoint and $X$. From the midpoint we calculate the
window start and end. If the value of $X$ is missing, we skip the rest
of the analysis.
#+end_export
#+begin_src go <<Retrieve midpoint and $X$, Ch. \ref{ch:me}>>=
  mi, err := strconv.ParseFloat(fields[1], 64)
  util.Check(err)
  ws := int((mi - float64(w) / 2.0) + 1.0)
  we := int(mi + float64(w) / 2.0)
  x, err := strconv.ParseFloat(fields[2], 64)
  util.Check(err)
  if x == missing {
	  continue
  }
#+end_src
#+begin_export latex
We import \ty{strconv}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "strconv"
#+end_src
#+begin_export latex
An open interval may get closed and then output. There are two
conditions that lead to closure: the sequence accession changes, or
the start of the current window has moved beyond the end of the
interval. A closed interval is output. Then we reset the interval
start to -1, the sum of $X$ to 0, and the window count also to 0.
#+end_export
#+begin_src go <<Output interval? Ch. \ref{ch:me}>>=
  if is >= 0 {
	  if curSeq != prevSeq || ws > ie {
		  avg := sum / float64(n)
		  fmt.Printf("%s\t%d\t%d\t%.4g\n",
			  prevSeq, is, ie, avg)
		  is = -1
		  sum = 0
		  n = 0
	  }
  }
#+end_src
#+begin_export latex
We import \ty{fmt}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:me}>>=
  "fmt"
#+end_src
#+begin_export latex
Whether or not the current window is a merge candidate, depends on the
program's mode. In default maximizing mode, $X\ge t$ makes the
window a candidate, otherwise $X\le t$ does that.
#+end_export
#+begin_src go <<Is window a merge candidate? Ch. \ref{ch:me}>>=
  isCand := false
  if !minimize {
	  if x >= threshold {
		  isCand = true
	  }
  } else {
	  if x <= threshold {
		  isCand = true
	  }
  }
#+end_src
#+begin_export latex
If the window is a merge candidate, its end becomes the end of the
current interval. If no interval is open at this moment, the window
start also becomes the start of a new interval. In addition, the sum
of $X$ is incremented, as is the window count. If the window start
is greater than the interval end, a new interval is created that
starts at the window start. Otherwise the interval is effectively
merged.
#+end_export
#+begin_src go <<Merge window? Ch. \ref{ch:me}>>=
  if isCand {
	  ie = we
	  if is < 0 {
		  is = ws
	  }
	  sum += x
	  n++
	  if ws > ie {
		  is = ws
	  }
  }
#+end_src
#+begin_export latex
At the end of the loop across all windows in the input file, there
might still be an open interval. If so, we print it.
#+end_export
#+begin_src go <<Output last interval? Ch. \ref{ch:me}>>=
  if is >= 0 {
	  avg := sum / float64(n)
	  fmt.Printf("%s\t%d\t%d\t%.4g\n",
		  prevSeq, is, ie, avg)
  }
#+end_src
#+begin_export latex
We have finished writing \ty{merwin}, it's time to test it.

\section{Testing}
Out testing program has hooks for imports and the testing logic.
#+end_export
#+begin_src go <<merwin_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch. \ref{ch:me}>>
  )

  func TestMerwin(t *testing.T) {
	  //<<Testing, Ch. \ref{ch:me}>>
  }
#+end_src
#+begin_export latex
We construct a set of tests and then iterate over them.
#+end_export
#+begin_src go <<Testing, Ch. \ref{ch:me}>>=
  var tests []*exec.Cmd
  //<<Construct tests, Ch. \ref{ch:me}>>
  for i, test := range tests {
	  //<<Run test, Ch. \ref{ch:me}>>
  }
#+end_src
#+begin_export latex
We construct four tests, which all run on the same input data located
in
\begin{verbatim}
../data/test.cm
\end{verbatim}
The first test uses default parameters and $t=0.99$.
#+end_export
#+begin_src go <<Construct tests, Ch. \ref{ch:me}>>=
  f := "../data/test.cm"
  test := exec.Command("./merwin", "-t", "0.99", f)
  tests = append(tests, test)
#+end_src
#+begin_export latex
We import \ty{exec}.
#+end_export
#+begin_src go <<Testing imports, Ch. \ref{ch:me}>>=
  "os/exec"
#+end_src
#+begin_export latex
For the second test we change $t$ from 0.99 to 0.9954.
#+end_export
#+begin_src go <<Construct tests, Ch. \ref{ch:me}>>=
  test = exec.Command("./merwin",  "-t",  "0.9954", f)
  tests = append(tests, test)
#+end_src
#+begin_export latex
For the third test we also change the window length from default 10 kb
to 50 kb.
#+end_export
#+begin_src go <<Construct tests, Ch. \ref{ch:me}>>=
  test = exec.Command("./merwin", "-t", "0.9954",
	  "-w", "50000", f)
  tests = append(tests, test)
#+end_src
#+begin_export latex
In the fourth and last test we work in minimizing mode.
#+end_export
#+begin_src go <<Construct tests, Ch. \ref{ch:me}>>=
  test = exec.Command("./merwin", "-t", "0.49", "-i", f)
  tests = append(tests, test)
#+end_src
#+begin_export latex
We run a test and compare the output we get with the output we want,
which is located in the files \ty{r1.txt}, \ty{r2.txt}, and so on.
#+end_export
#+begin_src go <<Run test, Ch. \ref{ch:me}>>=
  get, err := test.Output()
  if err != nil {
	  t.Error(err)
  }
  f := "r" + strconv.Itoa(i+1) + ".txt"
  want, err := os.ReadFile(f)
  if err != nil {
	  t.Error(err)
  }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", get, want)
  }
#+end_src
#+begin_export latex
We import \ty{strconv}, \ty{os}, and \ty{bytes}.
#+end_export
#+begin_src go <<Testing imports, Ch. \ref{ch:me}>>=
  "strconv"
  "os"
  "bytes"
#+end_src
