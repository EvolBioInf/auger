#+begin_export latex
\section{Introduction}
As described in Chapter~\ref{ch:cli}, a typical use of the program
\ty{macle} is to run a sliding window analysis of the match
complexity, $\cm$, on a given genome. The results of such an analysis
need are compared to the null distribution of $\cm$ in order to
determine threshold values for, say, random regions. The program
\ty{mantile}, for ``match quantile'' implements this threshold
computation. It takes as input the sequence length, GC content, window
length, and probability, and returns the $\cm$ quantile for that
probability. The tutorial in Section~\ref{sec:manTut} shows how to
compare the results of \ty{mantile} to simulated values of $\cm$.

\section{Implementation}
The outline of \ty{mantile} contains hooks for imports and the logic
of the main function.
#+end_export
#+begin_src go <<mantile.go>>=
  package main

  import (
	  //<<Imports, Ch. \ref{ch:man}>>
  )

  func main() {
	  //<<Main function, Ch. \ref{ch:man}>>
  }
#+end_src
#+begin_export latex
In the main function, we interact with the user, calculate the
quantile, and print it.
#+end_export
#+begin_src go <<Main function, Ch. \ref{ch:man}>>=
  //<<Interact with user, Ch. \ref{ch:man}>>
  //<<Calculate quantile, Ch. \ref{ch:man}>>
  //<<Print quantile, Ch. \ref{ch:man}>>
#+end_src
#+begin_export latex
The most basic user interaction are error messages emitted from the
\ty{log} package, so we prepare its output by setting the program
name. Then we set the usage of \ty{mantile}, declare its options,
parse the options, and check them.
#+end_export
#+begin_src go <<Interact with user, Ch. \ref{ch:man}>>=
clio.PrepLog("mantile")
//<<Set usage, Ch. \ref{ch:man}>>
//<<Declare options, Ch. \ref{ch:man}>>
//<<Parse options, Ch. \ref{ch:man}>>
//<<Check options, Ch. \ref{ch:man}>>
#+end_src
#+begin_export latex
We import \ty{clio}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:man}>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_export latex
The usage consists of three parts, the actual usage message, an
explanation of the purpose of \ty{mantile}, and an example command.
#+end_export
#+begin_src go <<Set usage, Ch. \ref{ch:man}>>=
  u := "mantile -l <sequence length> -w <window length> " +
	  "-g <GC content> -p <probability>"
  p := "Calculate quantiles of the C_m distribution."
  e := "mantile -l 2937655681 -w 20000 -g 0.408679 -p 0.05"
  clio.Usage(u, p, e)
#+end_src
#+begin_export latex
We declare the four options already shown in the usage, sequence
length (\ty{-l}), window length (\ty{-w}), GC content (\ty{-g}), and
probability (\ty{-p}). Since they are all mandatory, we set their
defaults to nonsensical negative values, so we can easily test later
on whether or not the user has set them.
#+end_export
#+begin_src go <<Declare options, Ch. \ref{ch:man}>>=
  optL := flag.Int("l", -1, "sequence length")
  optW := flag.Int("w", -1, "window length")
  optG := flag.Float64("g", -1.0, "GC content")
  optP := flag.Float64("p", -1.0, "probability")
#+end_src
#+begin_export latex
We import \ty{flag}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:man}>>=
  "flag"
#+end_src
#+begin_export latex
The options are parsed by calling the \ty{Parse} method.
#+end_export
#+begin_src go <<Parse options, Ch. \ref{ch:man}>>=
  flag.Parse()
#+end_src
#+begin_export latex
If the value of an option is negative, the user hasn't set it, so we
stop with a friendly request for that information.
#+end_export
#+begin_src go <<Check options, Ch. \ref{ch:man}>>=
  if *optL < 0 {
	  log.Fatal("please set a sequence length")
  }
  if *optW < 0 {
	  log.Fatal("please set a window length")
  }
  if *optG < 0 {
	  log.Fatal("please set a GC content")
  }
  if *optP < 0 {
	  log.Fatal("please set the probability")
  }
#+end_src
#+begin_export latex
We import \ty{log}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:man}>>=
  "log"
#+end_src
#+begin_export latex
As explained in the Methods section of~\cite{pir19:hig}, the $\cm$
quantile is a function of the mean match length and its variance. We
calculate these quantities before calculating the quantile, $q$, from
them. At the end, we also calculate $f(q)$ from the standard normal
distribution.
#+end_export
#+begin_src go <<Calculate quantile, Ch. \ref{ch:man}>>=
  l := *optL
  g := *optG
  var m, v float64
  //<<Calculate mean match length, Ch. \ref{ch:man}>>
  //<<Calculate variance of match lengths, Ch. \ref{ch:man}>>
  w := float64(*optW)
  P := *optP
  v = v / m / w
  s := math.Sqrt(v)
  q := 1 + s * math.Sqrt(2) * math.Erfinv(2.0 * P - 1.0)
  fq := 1. / math.Sqrt(2.*math.Pi) / s *
	  math.Exp(-1./2.*(q-1.)*(q-1.)/s/s)
#+end_src
#+begin_export latex
We import \ty{math}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:man}>>=
  "math"
#+end_src
#+begin_export latex
Following the derivation in~\cite{hau09:est}, let $P(X^\ast_i= x)$ be
the probability that the length of the shortest unique substring
starting at some position $i$ of a string of length $\ell$ is equal to
$x$. The computation of this quantity is implemented as the function
\ty{Prob} in the package
\begin{verbatim}
github.com/evolbioinf/sus
\end{verbatim}

To simplify matters, we consider here the longest \emph{match}
starting at $i$, $Y^\ast_i=X^\ast_i-1$. Its mean is
\[
\mu := E[Y^\ast_i]=E[X^\ast_i-1]=\sum_{x=1}^{\ell}(x-1)P(X^\ast_i=
x).
\]
To speed up this computation, we break from the loop when the mean
cannot increase any more.
#+end_export
#+begin_src go <<Calculate mean match length, Ch. \ref{ch:man}>>=
  for x := 1; x <= l; x++ {
	  p := sus.Prob(l, g, x)
	  if p <= math.SmallestNonzeroFloat32 && m > 1 {
		  break
	  }
	  m += float64(x-1) * p
  }
#+end_src
#+begin_export latex
We import \ty{sus}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:man}>>=
  "github.com/evolbioinf/sus"
#+end_src
#+begin_export latex
Similarly, the variance of the match lengths is calculated as
\[
\sigma^2:=V[Y^\ast_i]=V[X^\ast_i-1]=\sum_{x=1}^{\ell}x^2P(X^\ast_i = x)-(E[Y^\ast_i]+1)^2.
\]
Again, we sum until the variance doesn't grow any more.
#+end_export
#+begin_src go <<Calculate variance of match lengths, Ch. \ref{ch:man}>>=
  for x := 1; x <= l; x++ {
	  p := sus.Prob(l, g, x)
	  if p <= math.SmallestNonzeroFloat32 && v > 1 {
		  break
	  }
	  x2 := float64(x * x)
	  v += x2 * p
  }
  m2 := (m + 1.0) * (m + 1.0)
  v -= m2
#+end_src
#+begin_export latex
We print the quantile and related statistics using a tab writer to
align the columns.
#+end_export
#+begin_src go <<Print quantile, Ch. \ref{ch:man}>>=
  wr := tabwriter.NewWriter(os.Stdout, 0, 1, 2, ' ', 0)
  fmt.Fprintf(wr, "#SeqLen\tWinLen\tP\tQ\tF(Q)\n")
  fmt.Fprintf(wr, "%g\t%d\t%g\t%g\t%g\n",
	  float64(l), int(w), P, q, fq)
  wr.Flush()
#+end_src
#+begin_export latex
We import \ty{tabwriter}, \ty{os}, and \ty{fmt}.
#+end_export
#+begin_src go <<Imports, Ch. \ref{ch:man}>>=
  "os"
  "text/tabwriter"
  "fmt"
#+end_src
#+begin_export latex
We have finished writing \ty{mantile}, time to test it.
\section{Testing}
The outline of our test of \ty{mantile} has hooks for imports and the
testing logic.
#+end_export
#+begin_src go <<mantile_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports, Ch. \ref{ch:man}>>
  )

  func TestMantile(t *testing.T) {
	  //<<Testing, Ch. \ref{ch:man}>>
  }
#+end_src
#+begin_export latex
We construct a set of tests and then iterate over them.
#+end_export
#+begin_src go <<Testing, Ch. \ref{ch:man}>>=
  tests := make([]*exec.Cmd, 0)
  //<<Construct tests, Ch. \ref{ch:man}>>
  for i, test := range tests {
	  //<<Run test, Ch. \ref{ch:man}>>
  }
#+end_src
#+begin_export latex
We import \ty{exec}.
#+end_export
#+begin_src go <<Testing imports, Ch. \ref{ch:man}>>=
  "os/exec"
#+end_src
#+begin_export latex
We construct three tests. The first uses the parameters in the example
command. The other two use sets of parameters that led to problems in
earlier iterations of the program.
#+end_export
#+begin_src go <<Construct tests, Ch. \ref{ch:man}>>=
  test := exec.Command("./mantile", "-l", "2937655681",
	  "-w", "20000", "-g", "0.408679", "-p", "0.05")
  tests = append(tests, test)
  test = exec.Command("./mantile", "-l", "1000000",
	  "-w", "2000", "-g", "0.5", "-p", "0.05")
  tests = append(tests, test)
  test = exec.Command("./mantile", "-l", "3598443077",
	  "-w", "10000", "-g", "0.3782", "-p", "0.05")
  tests = append(tests, test)
#+end_src
#+begin_export latex
For each test we compare the results we get with the results we want,
which are stored in the files \ty{r1.txt}, \ty{r2.txt}, and
\ty{r3.txt}.
#+end_export
#+begin_src go <<Run test, Ch. \ref{ch:man}>>=
  g, e := test.Output()
  if e != nil {
	  t.Error(e)
  }
  f := "r" + strconv.Itoa(i + 1) + ".txt"
  w, e := os.ReadFile(f)
  if e != nil {
	  t.Error(e)
  }
  if !bytes.Equal(g, w) {
	  t.Errorf("get:\n%s\nwant:\n%s\n", g, w)
  }
#+end_src
#+begin_export latex
We import \ty{strconv}, \ty{os}, and \ty{bytes}.
#+end_export
#+begin_src go <<Testing imports, Ch. \ref{ch:man}>>=
  "strconv"
  "os"
  "bytes"
#+end_src
#+begin_export latex
\section{Tutorial}\label{sec:manTut}
The program \ty{mantile} gives the quantiles of the distribution of
the match complexity, $\cm$~\cite{pir19:hig}. Here we compare the
theoretical values returned by \ty{mantile} to the quantiles of $\cm$
values calculated from simulated sequences. We begin by generating a
random 10 Mb sequence using \ty{ranseq} from the
Biobox~\footnote{\ty{github.com/evolbioinf/biobox}}. We scan this
sequence with a 10 kb window, cut out the $\cm$ values in the third
column of the results, sort the $\cm$ values, and save them in the
file \ty{cm.dat}. \bpr{man.sh}{pr:man}
#+end_export
#+begin_src sh <<man.sh>>=
  ranseq -l 10000000 |
      macle -w 10000 |
      cut -f 3 |
      sort -n > cm.dat
#+end_src
#+begin_export latex
\epr Now we read off the observed quantiles from \ty{cm.dat}. We do
this using the script \ty{obs.sh}, where we count the number of lines
in \ty{cm.dat}, $l$. Then we iterate in $n=100$ steps over the sorted
$\cm$ values it contains. In each iteration we calculate the
cumulative probability, 0.01, 0.02, and so on. Then we calculate the
line number corresponding to the probability and look up that
quantile. At the end of each iteration we print the quantile.
\bpr{obs.sh}{pr:obs}
#+end_export
#+begin_src sh <<obs.sh>>=
  l=$(wc -l cm.dat |
	  awk '{print $1}')
  n=100
  for a in $(seq $n); do
      ##<<Calculate probability, Pr. \ref{pr:obs}>>
      ##<<Calculate cutoff line, Pr. \ref{pr:obs}>>
      ##<<Look up quantile, Pr. \ref{pr:obs}>>
      ##<<Print quantile, Pr. \ref{pr:obs}>>
  done
#+end_src
#+begin_export latex
\epr The probability is $p=a/n$, where $a$ is the argument in the
\ty{for} loop. We calculate $p$ using the basic calculator, \ty{bc},
since the bash only allows integer arithmetic.
#+end_export
#+begin_src sh <<Calculate probability, Pr. \ref{pr:obs}>>=
  p=$(echo "$a / $n" |
	  bc -l)
#+end_src
#+begin_export latex
The cutoff line is $c=l p$ rounded to the nearest integer.
#+end_export
#+begin_src sh <<Calculate cutoff line, Pr. \ref{pr:obs}>>=
  c=$(echo "$l * $p" |
	  bc -l |
	  awk '{printf "%d", $1}')
#+end_src
#+begin_export latex
The quantile is the $\cm$ value contained in the cutoff line.
#+end_export
#+begin_src sh <<Look up quantile, Pr. \ref{pr:obs}>>=
  q=$(head -n $c cm.dat |
	  tail -n 1)
#+end_src
#+begin_export latex
We print the quantile as a function of the probability and mark the
results with ``o'', for \emph{observed}.
#+end_export
#+begin_src sh <<Print quantile, Pr. \ref{pr:obs}>>=
  printf "%f\t%f\to\n" $p $q
#+end_src
#+begin_export latex
Having finished \ty{obs.sh}, we run it and store the results in the
file \ty{man.dat}.
#+end_export
#+begin_src sh <<man.sh>>=
  bash obs.sh > man.dat
#+end_src
#+begin_export latex
To get the expected values, we write another script, \ty{exp.sh},
which also iterates across the quantiles in 1\,\% steps. However,
since the 100\,\% quantile is infinity, we only iterate over the first
99 steps. For each iteration we calculate the probability and the
quantile, which we then print.  \bpr{exp.sh}{pr:exp}
#+end_export
#+begin_src sh <<exp.sh>>=
  n=100
  ((it=$n-1))
  for a in $(seq $it); do
      ##<<Calculate probability, Pr. \ref{pr:exp}>>
      ##<<Calculate quantile, Pr. \ref{pr:exp}>>
      ##<<Print quantile, Pr. \ref{pr:exp}>>
  done
#+end_src
#+begin_export latex
\epr We calculate the probability as before, $p=a/n$.
#+end_export
#+begin_src sh <<Calculate probability, Pr. \ref{pr:exp}>>=
  p=$(echo "$a / $n" |
	  bc -l)
#+end_src
#+begin_export latex
The quantile corresponding to the current $p$ is obtained from a call
to \ty{mantile}.
#+end_export
#+begin_src sh <<Calculate quantile, Pr. \ref{pr:exp}>>=
  q=$(./mantile -l 10000000 -g 0.5 -w 10000 -p $p |
	  tail -n +2 |
	  awk '{print $4}')
#+end_src
#+begin_export latex
We print the quantile as a function of $p$ and mark the pair with
``e'', for \emph{expected}.
#+end_export
#+begin_src sh <<Print quantile, Pr. \ref{pr:exp}>>=
  printf "%f\t%f\te\n" $p $q
#+end_src
#+begin_export latex
We are done writing \ty{exp.sh}, so we run it and append the results
to \ty{cm.dat}.
#+end_export
#+begin_src sh <<man.sh>>=
  bash exp.sh >> man.dat
#+end_src
#+begin_export latex
We plot the data in \ty{man.dat} to get Figure~\ref{fig:man}. This
shows good agreement between the expected and the observed quantiles
of the $\cm$ distribution.
#+end_export
#+begin_src sh <<man.sh>>=
  plotLine -x "Cumulative Probability" -y "Quantile" man.dat
#+end_src
#+begin_export latex
\begin{figure}
  \begin{center}
    \includegraphics{../mantile/man}
  \end{center}
  \caption{Expected (\emph{e}) and observed (\emph{o}) quantiles of
    the $\cm$ distribution as a function of the cumulative
    probability.}\label{fig:man}
\end{figure}
#+end_export
